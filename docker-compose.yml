version: "3"
services:
  frontend:
    build:
      dockerfile: Dockerfile.dev
      context: ./frontend
    volumes: 
      - /app/node_modules # WORKDIR이 /app이므로 /app으로 시작
      - ./frontend:/app
    # 리액트 앱 종료시 버그 방지
    stdin_open: true
  nginx:
    # restart: "no" => 어떠한 상황에서도 재시작을 하지 않겠다
    # restart: always => 항상 재시작을 하겠다.
    # restart: on-failure => on-failure 에러코드와 함께 컨테이너가 멈추었을 때만 재시작을 하겠다
    # restart: unless-stopped => 개발자가 임의로 멈추려고 할 때 빼고는 항상 재시작을 하겠다.
    restart: always # 재시작 정책
    build:
      # nginx 폴더 안에 Dockerfile 밖에 없으므로 Dockerfile만 쓴다.
      dockerfile: Dockerfile
      context: ./nginx
    ports:
      - "3000:80"
  backend:
    build:
      dockerfile: Dockerfile.dev
      context: ./backend
    # container_name: 은 명시해도 되고 안해도 된다.
    container_name: app_backend
    volumes: 
      - /app/node_modules
      - ./backend:/app
    environment:
      MYSQL_HOST: database-fullstack-mysql.cg1wwy26pgp4.us-east-2.rds.amazonaws.com
      MYSQL_USER: root
      MYSQL_ROOT_PASSWORD: admin12345
      MYSQL_DATABASE: myapp
      MYSQL_PORT: 3306
  # mysql:
  #   build: ./mysql
  #   restart: unless-stopped
  #   container_name: app_mysql
  #   ports:
  #     - "3307:3306"
  #   volumes: 
  #     - ./mysql/mysql_data:/var/lib/mysql
  #     - ./mysql/sqls/:/docker-entrypoint-initdb.d/
  #   environment: 
  #     MYSQL_ROOT_PASSWORD: johnahn
  #     MYSQL_DATABASE: myapp